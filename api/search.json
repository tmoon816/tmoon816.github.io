[{"id":"a80b4cff6e3e654d9a01209186766975","title":"设计模式-创建","content":"设计模式​\t设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n​\t设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。\n1.1、工厂模式​        定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行\n应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。\n优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\n缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。\n常见场景：\n\n数据库连接工厂：在后端应用程序中，经常需要与数据库进行交互。使用工厂模式可以创建一个数据库连接工厂，根据配置文件或者运行时参数的不同，动态地选择使用不同类型的数据库连接（例如MySQL、PostgreSQL等），而无需在代码中直接实例化具体的数据库连接对象。\n\n日志记录器工厂：日志记录在后端开发中非常重要，可以用于调试和问题追踪。使用工厂模式可以创建一个日志记录器工厂，根据需要选择使用不同的日志记录器（例如文件日志、数据库日志等），而不需要在代码中显式地创建特定类型的日志记录器。\n\n消息队列工厂：后端应用程序中经常需要处理异步任务和消息队列。使用工厂模式可以创建一个消息队列工厂，根据需求选择使用不同的消息队列实现（例如RabbitMQ、Kafka等），而无需直接实例化特定的消息队列对象。\n\n邮件发送工厂：在后端应用程序中发送电子邮件是常见的任务。使用工厂模式可以创建一个邮件发送工厂，根据配置或者运行时参数选择使用不同的邮件发送实现（例如SMTP、SendGrid等），而不需要在代码中直接实例化具体的邮件发送对象。\n\n\n","slug":"设计模式-创建","date":"2023-07-20T09:11:11.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-07-20T07:58:26.226Z","categories_index":"","tags_index":"","author_index":"Aurora"}]